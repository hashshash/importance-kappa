#!/usr/bin/env python3

import argparse
import os
import re

# parses command line arguments
# sample command: importanceKappa -c file1.xml file2.xml
parser = argparse.ArgumentParser(description="calculates Cohen's Kappa scores from CompanionBot Importance annotations")
parser.add_argument('--csv-header', action='store_true', dest='csv_header', help='print the header line for stats in CSV format to terminal: (file1,file2,total,agreement,chance,kappa_score)')
parser.add_argument('--csv-output', action='store_true', dest='csv_output_mode', help='print stats in CSV format to terminal: (file1,file2,total,agreement,chance,kappa_score)')
parser.add_argument('--annotation-set', dest='annotation_set', type=str, help='specifies the annotation set from which to gather annotations')
parser.add_argument('annotation_type', type=str, help='the annotation type to gather')
parser.add_argument('source1', type=str, help='the first source annotation file')
parser.add_argument('source2', type=str, help='the second source annotation file')

args = parser.parse_args()

sources = [args.source1, args.source2]
sources = [os.path.abspath(re.sub(""""|'""",'', source)) for source in sources]

class GateAnnotation:
    def __init__(self, filename):
        self.filename = filename

    def get_name(self):
        return self.filename

    def get_annotations(self, annotation_type, annotation_set):
        text = open(self.filename).read()
        if annotation_set:
            try:
                text = re.search(r'<AnnotationSet Name="{}">.*?</AnnotationSet>'.format(annotation_set), text, re.DOTALL).group()
            except AttributeError:
                print("'{}' is not a valid annotation set".format(annotation_set))
                quit()
        return re.findall(r'<Annotation\s+?.*?Type="{}".*?>.*?</Annotation>'.format(annotation_type), text, re.DOTALL)
    
    def get_annotation_sets(self):
        text = open(self.filename).read()
        


source1 = GateAnnotation(sources[0])
source2 = GateAnnotation(sources[1])

print(len(source1.get_annotations(args.annotation_type, annotation_set=args.annotation_set)))
print(len(source2.get_annotations(args.annotation_type, annotation_set=args.annotation_set)))
