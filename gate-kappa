#!/usr/bin/env python3

import os
import sys
import re
import argparse
import gate


# parses command line arguments
# sample command: importanceKappa --csv-output --annotation-set event_spans file1.xml file2.xml

csv_format = 'file1,file2,annotation_type:attribute,kappa_score,kappa_length'

parser = argparse.ArgumentParser(
        description='''calculates Cohen's Kappa scores from
         CompanionBot Importance annotations'''
        )
# TODO: csv-header output
parser.add_argument(
        '--csv-header',
        action='store_true',
        dest='csv_header',
        help='''print the header line for stats in CSV format to terminal:
         ({})'''.format(csv_format)
        )

if '--csv-header' in sys.argv:
    print(csv_format)
    quit()

parser.add_argument(
        '--csv-output',
        action='store_true',
        dest='csv_output_mode',
        help='''print stats in CSV format to terminal and exit:
         ({})'''.format(csv_format)
        )
parser.add_argument(
        '--annotation-set',
        dest='annotation_set',
        type=str,
        help='specifies the annotation set from which to gather annotations'
        )
parser.add_argument(
        '--schema',
        dest='schema',
        type=str,
        help='specifies the annotation schema used to create annotations'
        )
parser.add_argument(
        '--annotation-type',
        type=str,
        required=True,
        help='the annotation type to gather'
        )
parser.add_argument(
        'source1',
        type=str,
        help='the first source annotation file'
        )
parser.add_argument(
        'source2',
        type=str,
        help='the second source annotation file')
parser.add_argument(
        '--weighting',
        type=str,
        required=True,
        help="the type of weighting used to calculate Kappa; can be 'linear', 'quadratic', or 'none'")

args = parser.parse_args()
sources = [args.source1, args.source2]
csv_output_mode = args.csv_output_mode
source1 = gate.Annotation(sources[0])
source2 = gate.Annotation(sources[1])
schema = gate.Schema(args.schema)
weighting = args.weighting
if weighting == 'none': weighting = None

test = gate.pair_annotations(
        source1.get_annotations(
            annotation_type=args.annotation_type,
            annotation_set=args.annotation_set
            ),
        source2.get_annotations(
            annotation_type=args.annotation_type,
            annotation_set=args.annotation_set
            ),
        annotation_type=args.annotation_type,
        schema=schema
        )

for x in test:
    # use linear weighting for importance
    # don't use weighting for categorical values like polarity
    # if no weighting, assign unique numbers for each annotation feature value

    kappa = gate.kappa(x, weights=weighting)

    if csv_output_mode:
        print(
            '{},{},{}:{},{},{}'.format(
                os.path.basename(args.source1),
                os.path.basename(args.source2),
                args.annotation_type,
                x.attribute,
                kappa['score'],
                kappa['length']
            )
        )
    else:
        print(kappa)
