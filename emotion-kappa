#!/usr/bin/env python3

import csv
from collections import deque
import os
import re
import argparse
import time

#TODO: remove past annotation sessions
# annotators have been unknowingly annotating over existing annotation documents, and without editing the code of the underlying tool, this will most likely persist

annotations = {'annotator1': [], 'annotator2': []}

labelBank = 'Anger', 'Boredom', 'Confusion', 'Disgust', 'Fear', 'Happiness', 'Sadness', 'Surprise', 'Neutral'

kappa = {
        'Anger': {'Anger': 0.0, 'Boredom': 0.0, 'Confusion': 0.0, 'Disgust': 0.0, 'Fear': 0.0, 'Happiness': 0.0,
            'Sadness': 0.0, 'Surprise': 0.0, 'Neutral': 0.0},
        'Boredom': {'Anger': 0.0, 'Boredom': 0.0, 'Confusion': 0.0, 'Disgust': 0.0, 'Fear': 0.0, 'Happiness': 0.0,
            'Sadness': 0.0, 'Surprise': 0.0, 'Neutral': 0.0},
        'Confusion': {'Anger': 0.0, 'Boredom': 0.0, 'Confusion': 0.0, 'Disgust': 0.0, 'Fear': 0.0, 'Happiness': 0.0,
            'Sadness': 0.0, 'Surprise': 0.0, 'Neutral': 0.0},
        'Disgust': {'Anger': 0.0, 'Boredom': 0.0, 'Confusion': 0.0, 'Disgust': 0.0, 'Fear': 0.0, 'Happiness': 0.0,
            'Sadness': 0.0, 'Surprise': 0.0, 'Neutral': 0.0},
        'Fear': {'Anger': 0.0, 'Boredom': 0.0, 'Confusion': 0.0, 'Disgust': 0.0, 'Fear': 0.0, 'Happiness': 0.0,
            'Sadness': 0.0, 'Surprise': 0.0, 'Neutral': 0.0},
        'Happiness': {'Anger': 0.0, 'Boredom': 0.0, 'Confusion': 0.0, 'Disgust': 0.0, 'Fear': 0.0, 'Happiness': 0.0,
            'Sadness': 0.0, 'Surprise': 0.0, 'Neutral': 0.0},
        'Sadness': {'Anger': 0.0, 'Boredom': 0.0, 'Confusion': 0.0, 'Disgust': 0.0, 'Fear': 0.0, 'Happiness': 0.0,
            'Sadness': 0.0, 'Surprise': 0.0, 'Neutral': 0.0},
        'Surprise': {'Anger': 0.0, 'Boredom': 0.0, 'Confusion': 0.0, 'Disgust': 0.0, 'Fear': 0.0, 'Happiness': 0.0,
            'Sadness': 0.0, 'Surprise': 0.0, 'Neutral': 0.0},
        'Neutral': {'Anger': 0.0, 'Boredom': 0.0, 'Confusion': 0.0, 'Disgust': 0.0, 'Fear': 0.0, 'Happiness': 0.0,
            'Sadness': 0.0, 'Surprise': 0.0, 'Neutral': 0.0},
        }

prevPosition1 = 0
prevPosition2 = 0
currPosition1 = 0
currPosition2 = 0
prevLabel1 = ''
prevLabel2 = ''
currLabel1 = ''
currLabel2 = ''
queue1 = deque()
queue2 = deque()

def insertAnnotations(annotator, fileName):
    global annotations
    reader = csv.reader(fileName)
    rows = deque()
    for row in reader:
        rows.append([float(row[1]), row[2]])

    first = rows.popleft()
    lines = [first]
    for row in range(len(rows)):
        line = rows.popleft()
# if the previous annotation's timestamp is greater than the current, reset the annotations to be calculated
        if line[0] >= lines[-1][0]: lines.append(line)
        else: lines = [line]

    for line in lines:
        annotations[annotator].append(line)

def compareAnnotations():
    global prevPosition1, prevPosition2, currPosition1, currPosition2, prevLabel1, prevLabel2, currLabel1, currLabel2, queue1, queue2, annotations, kappa
    queue1 = deque(annotations['annotator1'])
    queue2 = deque(annotations['annotator2'])

    temp1 = queue1.popleft()
    prevPosition1 = temp1[0]
    prevLabel1 = temp1[1].replace('Possible ', '')

    temp2 = queue2.popleft()
    prevPosition2 = temp2[0]
    prevLabel2 = temp2[1].replace('Possible ', '')

    temp1 = queue1.popleft()
    currPosition1 = temp1[0]
    currLabel1 = temp1[1].replace('Possible ', '')

    temp2 = queue2.popleft()
    currPosition2 = temp2[0]
    currLabel2 = temp2[1].replace('Possible ', '')

    recursiveFunc()

def recursiveFunc():
    global prevPosition1, prevPosition2, currPosition1, currPosition2, prevLabel1, prevLabel2, currLabel1, currLabel2, queue1, queue2, annotations, kappa
    if currPosition1 < currPosition2:
        kappa[prevLabel1][prevLabel2] += currPosition1 - prevPosition1
        if len(queue1) > 0:
            prevPosition1 = currPosition1
            prevPosition2 = currPosition1
            prevLabel1 = currLabel1
            temp1 = queue1.popleft()
            currPosition1 = temp1[0]
            currLabel1 = temp1[1]
            currLabel1 = currLabel1.replace('Possible ', '')
        elif len(queue2) > 0:
            pass
        else:
            return
    elif currPosition1 > currPosition2:
        kappa[prevLabel1][prevLabel2] += currPosition2 - prevPosition2
        if len(queue2) > 0:
            prevPosition1 = currPosition2
            prevPosition2 = currPosition2
            prevLabel2 = currLabel2
            temp2 = queue2.popleft()
            currPosition2 = temp2[0]
            currLabel2 = temp2[1]
            currLabel2 = currLabel2.replace('Possible ', '')
        elif len(queue2) > 0:
            pass
        else:
            return
    else:
        kappa[prevLabel1][prevLabel2] += currPosition2 - prevPosition2
        if len(queue1) > 0:
            prevPosition1 = currPosition1
            prevPosition2 = currPosition1
            prevLabel1 = currLabel1
            temp1 = queue1.popleft()
            currPosition1 = temp1[0]
            currLabel1 = temp1[1]
            currLabel1 = currLabel1.replace('Possible ', '')
        elif len(queue2) > 0:
            pass
        else:
            return
        if len(queue2) > 0:
            prevPosition1 = currPosition2
            prevPosition2 = currPosition2
            prevLabel2 = currLabel2
            temp2 = queue2.popleft()
            currPosition2 = temp2[0]
            currLabel2 = temp2[1]
            currLabel2 = currLabel2.replace('Possible ', '')
        elif len(queue2) > 0:
            pass
        else:
            return
    recursiveFunc()


def calculateKappa():

    #TODO: clean this section up. Use a list comprehension of the labelBank or something.
    agreement = kappa['Anger']['Anger'] + kappa['Boredom']['Boredom'] + kappa['Confusion']['Confusion'] + \
            kappa['Disgust']['Disgust'] + kappa['Fear']['Fear'] + kappa['Happiness']['Happiness'] + \
            kappa['Sadness']['Sadness'] + kappa['Surprise']['Surprise'] + kappa['Neutral']['Neutral']

    anger1 = kappa['Anger']['Anger'] + kappa['Anger']['Boredom'] + kappa['Anger']['Confusion'] + \
            kappa['Anger']['Disgust'] + kappa['Anger']['Fear'] + kappa['Anger']['Happiness'] + \
            kappa['Anger']['Sadness'] + kappa['Anger']['Surprise'] + kappa['Anger']['Neutral']
    boredom1 = kappa['Boredom']['Anger'] + kappa['Boredom']['Boredom'] + kappa['Boredom']['Confusion'] + \
            kappa['Boredom']['Disgust'] + kappa['Boredom']['Fear'] + kappa['Boredom']['Happiness'] + \
            kappa['Boredom']['Sadness'] + kappa['Boredom']['Surprise'] + kappa['Boredom']['Neutral']
    confusion1 = kappa['Confusion']['Anger'] + kappa['Confusion']['Boredom'] + kappa['Confusion']['Confusion'] + \
            kappa['Confusion']['Disgust'] + kappa['Confusion']['Fear'] + kappa['Confusion']['Happiness'] + \
            kappa['Confusion']['Sadness'] + kappa['Confusion']['Surprise'] + kappa['Confusion']['Neutral']
    disgust1 = kappa['Disgust']['Anger'] + kappa['Disgust']['Boredom'] + kappa['Disgust']['Confusion'] + \
            kappa['Disgust']['Disgust'] + kappa['Disgust']['Fear'] + kappa['Disgust']['Happiness'] + \
            kappa['Disgust']['Sadness'] + kappa['Disgust']['Surprise'] + kappa['Disgust']['Neutral']
    fear1 = kappa['Fear']['Anger'] + kappa['Fear']['Boredom'] + kappa['Fear']['Confusion'] + \
            kappa['Fear']['Disgust'] + kappa['Fear']['Fear'] + kappa['Fear']['Happiness'] +\
            kappa['Fear']['Sadness'] + kappa['Fear']['Surprise'] + kappa['Fear']['Neutral']
    happiness1 = kappa['Happiness']['Anger'] + kappa['Happiness']['Boredom'] + kappa['Happiness']['Confusion'] + \
            kappa['Happiness']['Disgust'] + kappa['Happiness']['Fear'] + kappa['Happiness']['Happiness'] + \
            kappa['Happiness']['Sadness'] + kappa['Happiness']['Surprise'] + kappa['Happiness']['Neutral']
    sadness1 = kappa['Sadness']['Anger'] + kappa['Sadness']['Boredom'] + kappa['Sadness']['Confusion'] + \
            kappa['Sadness']['Disgust'] + kappa['Sadness']['Fear'] + kappa['Sadness']['Happiness'] + \
            kappa['Sadness']['Sadness'] + kappa['Sadness']['Surprise'] + kappa['Sadness']['Neutral']
    surprise1 = kappa['Surprise']['Anger'] + kappa['Surprise']['Boredom'] + kappa['Surprise']['Confusion'] + \
            kappa['Surprise']['Disgust'] + kappa['Surprise']['Fear'] + kappa['Surprise']['Happiness'] + \
            kappa['Surprise']['Sadness'] + kappa['Surprise']['Surprise'] + kappa['Surprise']['Neutral']
    neutral1 = kappa['Neutral']['Anger'] + kappa['Neutral']['Boredom'] + kappa['Neutral']['Confusion'] + \
            kappa['Neutral']['Disgust'] + kappa['Neutral']['Fear'] + kappa['Neutral']['Happiness'] + \
            kappa['Neutral']['Sadness'] + kappa['Neutral']['Surprise'] + kappa['Neutral']['Neutral']

    anger2 = kappa['Anger']['Anger'] + kappa['Boredom']['Anger'] + kappa['Confusion']['Anger'] + \
            kappa['Disgust']['Anger'] + kappa['Fear']['Anger'] + kappa['Happiness']['Anger'] + \
            kappa['Sadness']['Anger'] + kappa['Surprise']['Anger'] + kappa['Neutral']['Anger']
    boredom2 = kappa['Anger']['Boredom'] + kappa['Boredom']['Boredom'] + kappa['Confusion']['Boredom'] + \
            kappa['Disgust']['Boredom'] + kappa['Fear']['Boredom'] + kappa['Happiness']['Boredom'] + \
            kappa['Sadness']['Boredom'] + kappa['Surprise']['Boredom'] + kappa['Neutral']['Boredom']
    confusion2 = kappa['Anger']['Confusion'] + kappa['Boredom']['Confusion'] + kappa['Confusion']['Confusion'] + \
            kappa['Disgust']['Confusion'] + kappa['Fear']['Confusion'] + kappa['Happiness']['Confusion'] + \
            kappa['Sadness']['Confusion'] + kappa['Surprise']['Confusion'] + kappa['Neutral']['Confusion']
    disgust2 = kappa['Anger']['Disgust'] + kappa['Boredom']['Disgust'] + kappa['Confusion']['Disgust'] + \
            kappa['Disgust']['Disgust'] + kappa['Fear']['Disgust'] + kappa['Happiness']['Disgust'] + \
            kappa['Sadness']['Disgust'] + kappa['Surprise']['Disgust'] + kappa['Neutral']['Disgust']
    fear2 = kappa['Anger']['Fear'] + kappa['Boredom']['Fear'] + kappa['Confusion']['Fear'] + \
            kappa['Disgust']['Fear'] + kappa['Fear']['Fear'] + kappa['Happiness']['Fear'] + \
            kappa['Sadness']['Fear'] + kappa['Surprise']['Fear'] + kappa['Neutral']['Fear']
    happiness2 = kappa['Anger']['Happiness'] + kappa['Boredom']['Happiness'] + kappa['Confusion']['Happiness'] + \
            kappa['Disgust']['Happiness'] + kappa['Fear']['Happiness'] + kappa['Happiness']['Happiness'] + \
            kappa['Sadness']['Happiness'] + kappa['Surprise']['Happiness'] + kappa['Neutral']['Happiness']
    sadness2 = kappa['Anger']['Sadness'] + kappa['Boredom']['Sadness'] + kappa['Confusion']['Sadness'] + \
            kappa['Disgust']['Sadness'] + kappa['Fear']['Sadness'] + kappa['Happiness']['Sadness'] + \
            kappa['Sadness']['Sadness'] + kappa['Surprise']['Sadness'] + kappa['Neutral']['Sadness']
    surprise2 = kappa['Anger']['Surprise'] + kappa['Boredom']['Surprise'] + kappa['Confusion']['Surprise'] + \
            kappa['Disgust']['Surprise'] + kappa['Fear']['Surprise'] + kappa['Happiness']['Surprise'] + \
            kappa['Sadness']['Surprise'] + kappa['Surprise']['Surprise'] + kappa['Neutral']['Surprise']
    neutral2 = kappa['Anger']['Neutral'] + kappa['Boredom']['Neutral'] + kappa['Confusion']['Neutral'] + \
            kappa['Disgust']['Neutral'] + kappa['Fear']['Neutral'] + kappa['Happiness']['Neutral'] + \
            kappa['Sadness']['Neutral'] + kappa['Surprise']['Neutral'] + kappa['Neutral']['Neutral']

    total = anger1 + boredom1 + confusion1 + disgust1 + fear1 + happiness1 + sadness1 + surprise1 + neutral1
    agreement = agreement / total

    anger3 = (anger1 * anger2) / total
    boredom3 = (boredom1 * boredom2) / total
    confusion3 = (confusion1 * confusion2) / total
    disgust3 = (disgust1 * disgust2) / total
    fear3 = (fear1 * fear2) / total
    happiness3 = (happiness1 * happiness2) / total
    sadness3 = (sadness1 * sadness2) / total
    surprise3 = (surprise1 * surprise2) / total
    neutral3 = (neutral1 * neutral2) / total

    chance = (anger3 + boredom3 + confusion3 + disgust3 + fear3 + happiness3 + sadness3 + surprise3 + neutral3) / total
    kappa_score = (agreement - chance) / (1 - chance)

    return {'total':total, 'agreement':agreement, 'chance':chance, 'kappa_score':kappa_score}


def timespanToSeconds(timespan):
    h, m, s = timespan.split(':')
    h = float(h)
    m = float(m)
    s = float(s)
    return (h*60*60 + m*60 + s)

if __name__ == '__main__':
    parser= argparse.ArgumentParser(description="calculates Cohen's Kappa scores from CompanionBot Emotion Detection annotation files")
#TODO: finish csv header output
    parser.add_argument('-H', '--csv-header', action='store_true', dest='csv_header', help='print the header line for stats in CSV format to terminal: (file1,file2,total,agreement,chance,kappa_score)')
    parser.add_argument('-c', '--csv-output', action='store_true', dest='csv_output_mode', help='print stats in CSV format to terminal: (file1,file2,total,agreement,chance,kappa_score)')
    parser.add_argument('source1', type=str, help='the first source annotation file')
    parser.add_argument('source2', type=str, help='the second source annotation file')

    args = parser.parse_args()
    csv_output_mode = args.csv_output_mode
    sources = os.path.abspath(re.sub(""""|'""",'', args.source1)), os.path.abspath(re.sub(""""|'""",'', args.source2))

    for source in sources:
        if not os.path.isfile(source): print("'{}' not a valid file path!".format(source))
    for source in sources:
        if not os.path.isfile(source): quit()

    readCSVs = []
    for source in sources:
        source = os.path.abspath(re.sub(""""|'""",'',source))
        if source.endswith('.txt'):
            readFile = open(source)
            outputFile = os.path.join(os.path.dirname(source), re.sub('.txt$', '.csv', os.path.basename(source)))
            with open(outputFile, 'w', newline='') as csvFile:
                lines = []
                for line in readFile.readlines():
                    line = re.sub(', ', ',', line)
                    line = re.sub('file:///', '', line)
                    tokens = line.split(',')
                    if ':' in tokens[1]: tokens[1] = timespanToSeconds(tokens[1])
                    for x in range(len(tokens)):
                        tokens[x] = str(tokens[x]).rstrip()
                    lines.append(tokens)
                for line in lines:
                    csv.writer(csvFile).writerow(line)
            for x in range(3):
                if os.path.isfile(outputFile): break
                else: time.sleep(1)
            readCSVs.append(outputFile)
        elif source.endswith('.csv'):
            readCSVs.append(source)
        else: print('{} not recognized'.format(source))

    #if the label is not recognized, use previous. if no previous, use 'neutral'
    for f in readCSVs:
        lines = []
        for line in open(f).readlines():
            lines.append(line.rstrip('\n').split(','))
        with open(f, 'w', newline='\n') as csvFile:
            for line in range(len(lines)):
# 0=file, 1=duration, 2=label, 3=time
                if lines[line][2] not in labelBank:
                    if line - 2 >= 0:
                        if lines[line][2].lower() == 'No'.lower():
                            lines[line - 1][2] = lines[line - 2][2]
                            lines[line][2] = lines[line - 2][2]
                        else: lines[line][2] = lines[line - 1][2]
                    else: lines[line][2] = 'Neutral'
            for line in lines:
                csv.writer(csvFile).writerow(line)

    with open(readCSVs[0], 'r', newline='') as csvFile:
        insertAnnotations('annotator1', csvFile)

    with open(readCSVs[1], 'r', newline='') as csvFile:
        insertAnnotations('annotator2', csvFile)

    compareAnnotations()

    stats = calculateKappa()
    if csv_output_mode:
        #TODO: create csv-prep option that will supply the header for a csv file before batch processing
        #file1,file2,total,agreement,chance,kappa_score
        print('{},{},{},{},{},{}'.format(os.path.basename(readCSVs[0]), os.path.basename(readCSVs[1]), round(stats['total'],2), round(stats['agreement'],2), round(stats['chance'],2), round(stats['kappa_score'],2)))

    else:
        seconds = stats['total']
        minutes, seconds = divmod(seconds, 60)
        hours, minutes = divmod(minutes, 60)

        print('File length'.ljust(20, '.') + ' {}h{}m{}s'.format(int(hours), int(minutes), int(seconds)))
        print('Total agreement'.ljust(20, '.') + ' {}%'.format(float(round(stats['agreement'],2) * 100)))
        print('Chance agreement'.ljust(20, '.') + ' {}%'.format(float(round(stats['chance'],2) * 100)))
        print('Kappa score'.ljust(20, '.') + ' {}'.format(round(stats['kappa_score'],2)))

    #NOTE: this is only here for troubleshooting the negative scores obtained on GX-08-21. It must be something to do with the parsing of the annotations. Calculations otherwise seem fine. Remove when finished.

    #print(calculateKappa())
